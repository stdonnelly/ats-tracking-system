// The left sidebar with the ability to edit the selected job application

import { LineEdit, DatePickerPopup, ComboBox, TextEdit, Button, StandardButton, Date } from "std-widgets.slint";

import { JobApplicationView, HumanResponseView } from "../models.slint";
import { Logic } from "../functions.slint";

export component Sidebar inherits GridLayout {
    // Properties accessible by users of this component
    in-out property <JobApplicationView> selected-job-application;
    out property <length> sidebar-min-width: self.spacing + (2 * self.padding) + self.col-1-min-width + source-input.min-width;
    
    // Callbacks to be defined elsewhere
    callback submit-job-application <=> job-application-submit.clicked;
    callback new-job-application();
    callback delete-job-application(int);
    pure callback date-diff <=> Logic.date-diff;

    // Component styling
    width: 20%;
    spacing: 5px;
    padding: 5px;
    property <length> col-1-min-width: 6.5rem;

    // After an input is changed by the user, the binding with the selected-job-application is lost.
    // So, we need to update everything to the new row manually
    public function re-bind-selected() {
        source-input.text = selected-job-application.source;
        company-input.text = selected-job-application.company;
        job-title-input.text = selected-job-application.job-title;
        time-investment-min.text = floor(selected-job-application.time-investment / 60);
        time-investment-sec.text = mod(selected-job-application.time-investment, 60);
        human-response-input.current-value = Logic.human-response-to-string(selected-job-application.human-response);
        website-input.text = selected-job-application.application-website;
        notes-input.text = selected-job-application.notes;
    }

    Row {
        Text {
            text: "ID";
            font-weight: 700;
            wrap: word-wrap;
            // This sets the minimum width for this entire column.
            // This is necessary because slint sometimes displays the second column over this one instead of just causing the second column to wrap.
            min-width: col-1-min-width;
        }

        Text {
            height: 2rem;
            text: Logic.display-if-nonzero(selected-job-application.id);
            wrap: word-wrap;
        }
    }

    Row {
        Text {
            text: "Source";
            font-weight: 700;
            wrap: word-wrap;
        }

        source-input := LineEdit {
            height: 2.5rem;
            text: selected-job-application.source;
            edited(text) => {
                selected-job-application.source = text;
            }
            // wrap: word-wrap;
        }
    }

    Row {
        Text {
            text: "Company";
            font-weight: 700;
            wrap: word-wrap;
        }

        company-input := LineEdit {
            height: 2.5rem;
            text: selected-job-application.company;
            edited(text) => {
                selected-job-application.company = text;
            }
            // wrap: word-wrap;
        }
    }

    Row {
        Text {
            text: "Job Title";
            font-weight: 700;
            wrap: word-wrap;
        }

        job-title-input := LineEdit {
            height: 2.5rem;
            text: selected-job-application.job-title;
            edited(text) => {
                selected-job-application.job-title = text;
            }
            // wrap: word-wrap;
        }
    }

    Row {
        Text {
            text: "Application Date";
            font-weight: 700;
            wrap: word-wrap;
        }

        // Date inputs will be LineEdit to make sure formatting is consistent with the actual text inputs.
        // But the text editing is actually disabled and clicking on the element will bring up a date picker popup
        application-date-input := LineEdit {
            height: 2.5rem;
            text: @tr(
            "{}/{}/{}",
            selected-job-application.application-date.month,
            selected-job-application.application-date.day,
            selected-job-application.application-date.year);
            // wrap: word-wrap;
            read-only: true;

            // Use the `has-focus` property as a pseudo `clicked` callback
            changed has-focus => {
                if (self.has-focus) {
                    application-date-picker.show();
                }
            }
        }

        application-date-picker := DatePickerPopup {
            title: "Application Date";
            // Change to this when Slint is updated
            close-policy: no-auto-close;
            // close-on-click: false;
            canceled() => {
                // Close this
                application-date-picker.close();
                // Clear the focus on the input field.
                // This is done because the date picker is only activated when `application-date-input` focus changes.
                // If the focus is not cleared, subsequent clicks of the same field would not change the focus.
                application-date-input.clear-focus();
            }
            accepted(date) => {
                // Update the application date. This is enough because `@tr()` automatically updates and the binding is never lost.
                selected-job-application.application-date = date;
                // See the comments on these in `cancelled()`
                application-date-picker.close();
                application-date-input.clear-focus();
            }
        }
    }

    Row {
        Text {
            text: "Time Taken";
            font-weight: 700;
            wrap: word-wrap;
        }

        // Custom time input using a horizontal layout of `LineEdit`s
        HorizontalLayout {
            // This is used to update the selected job application after text edit changes
            function store-time() {
                selected-job-application.time-investment = (time-investment-min.text.to-float() * 60) + time-investment-sec.text.to-float();

                // Go back to the fields. This will normalize the seconds.
                time-investment-min.text = floor(selected-job-application.time-investment / 60);
                time-investment-sec.text = mod(selected-job-application.time-investment, 60);
            }

            time-investment-min := LineEdit {
                // Set the `min-width` of these to 0.
                // This is just to override the default `min-width` for `LineEdit`, preventing this from growing the column more than it needs to.
                // The width will end up being (column width - " : ") / 2
                min-width: 0;
                height: 2.5rem;
                text: floor(selected-job-application.time-investment / 60);
                input-type: number;
                edited(_) => {
                    store-time();
                }
            }

            Text {
                text: " : ";
                vertical-alignment: center;
            }

            time-investment-sec := LineEdit {
                min-width: 0;
                height: 2.5rem;
                text: mod(selected-job-application.time-investment, 60);
                input-type: number;
                edited(_) => {
                    store-time();
                }
            }
        }
    }

    Row {
        Text {
            text: "Human Response";
            font-weight: 700;
            wrap: word-wrap;
        }

        human-response-input := ComboBox {
            height: 2.5rem;
            // text: human-response-to-string(selected-job-application.human-response);
            model: [
                "No response yet",
                "Rejection",
                "Interview request",
                "Interviewed then rejected",
                "Job offer"
            ];
            current-value: Logic.human-response-to-string(selected-job-application.human-response);
            selected(value) => {
                selected-job-application.human-response = Logic.string-to-human-response(value);
            }
            // wrap: word-wrap;
        }
    }

    Row {
        Text {
            text: "Response Date";
            font-weight: 700;
            wrap: word-wrap;
        }

        // Very similar to `application-date-input` and `application-data-picker`.
        // See the comments on them for a more detailed explanation of this.
        response-date-input := LineEdit {
            height: 2.5rem;
            text: Logic.display-if-human-response(selected-job-application.human-response, @tr(
                    "{}/{}/{}",
                    selected-job-application.human-response-date.month,
                    selected-job-application.human-response-date.day,
                    selected-job-application.human-response-date.year));
            read-only: true;
            // wrap: word-wrap;

            // Use the `has-focus` property as a pseudo `clicked` callback
            changed has-focus => {
                if (self.has-focus) {
                    response-date-picker.show();
                }
            }
        }

        response-date-picker := DatePickerPopup {
            title: "Response Date";
            // Change to this when Slint is updated
            close-policy: no-auto-close;
            // close-on-click: false;
            canceled() => {
                response-date-picker.close();
                response-date-input.clear-focus();
            }
            accepted(date) => {
                selected-job-application.human-response-date = date;
                response-date-picker.close();
                response-date-input.clear-focus();
            }
        }
    }

    Row {
        Text {
            text: "Days to Respond";
            font-weight: 700;
            wrap: word-wrap;
        }

        Text {
            height: 2.5rem;
            text: Logic.display-if-human-response(selected-job-application.human-response, date-diff(selected-job-application.application-date, selected-job-application.human-response-date));
            wrap: word-wrap;
        }
    }

    Row {
        Text {
            text: "Website";
            font-weight: 700;
            wrap: word-wrap;
        }

        website-input := TextEdit {
            text: selected-job-application.application-website;
            edited(text) => {
                selected-job-application.application-website = text;
            }
            wrap: char-wrap;
        }
    }

    Row {
        Text {
            text: "Notes";
            font-weight: 700;
            wrap: word-wrap;
        }

        notes-input := TextEdit {
            text: selected-job-application.notes;
            edited(text) => {
                selected-job-application.notes = text;
            }
            wrap: word-wrap;
        }
    }

    Row {
        // For this row, instead of using the same two columns, we will put all the buttons in their own horizontal layout.
        // This allows 2 columns for the rest, but 3 independent columns here
        HorizontalLayout {
            colspan: 2;
            spacing: 5px;
            // Set the height of this element to the default `min-value` of `Button`.
            // This is necessary because `StandardButton` sometimes makes weird changes to the height
            height: job-application-new.min-height;

            job-application-new := Button {
                text: "New";
                clicked => {
                    // Call the backend code to change the sidebar
                    new-job-application();
                }
            }

            job-application-delete := Button {
                text: "Delete";
                clicked => {
                    // Do nothing if there is no selected job application
                    if (selected-job-application.id == 0) {
                        return;
                    }

                    // Send delete to callback
                    // The callback will prompt for confirmation
                    delete-job-application(selected-job-application.id);
                }
            }

            job-application-submit := StandardButton {
                kind: apply;
            }
        }
    }
}
