// The main window

import { StandardTableView, StandardListView, ListView, Date, LineEdit, ComboBox, TextEdit, Button, StandardButton, Palette, DatePickerPopup } from "std-widgets.slint";

import { DeleteConfirmation } from "./delete_confirmation.slint";
import { HumanResponseView, JobApplicationView } from "./models.slint";
import { Logic } from "./functions.slint";
import { Sidebar } from "components/sidebar.slint";
export { DeleteConfirmation, HumanResponseView, JobApplicationView }

export component AppWindow inherits Window {
    // Callbacks
    callback use-job-application(int);
    // Re-exported from sidebar
    callback submit-job-application <=> sidebar.submit-job-application;
    callback new-job-application <=> sidebar.new-job-application;
    callback delete-job-application <=> sidebar.delete-job-application;
    // date-diff(Date, Date) is aliased here do the rust code only needs to access this component for anything related to this component
    // Other components can just bind to Logic.date-diff and it will use the definition here
    pure callback date-diff <=> Logic.date-diff;
    
    // Properties
    // Might need to be in-out if we will store 
    in-out property <[[StandardListViewItem]]> table-rows;
    in-out property <JobApplicationView> selected-job-application;

    // Not sure if this is the best way to re-export a function, but binding like callbacks doesn't seem to work
    public function re-bind-selected() {
        sidebar.re-bind-selected();
    }

    // Properties of the window
    preferred-width: max(
        1024px,
        + sidebar.sidebar-min-width
        // Table: Sum of all column widths
        + table-view.columns[0].min-width
        + table-view.columns[1].min-width
        + table-view.columns[2].min-width
        + table-view.columns[3].min-width
        + table-view.columns[4].min-width
        + table-view.columns[5].min-width
        + table-view.columns[6].min-width
        + table-view.columns[7].min-width
        + table-view.columns[8].min-width
        + table-view.columns[9].min-width
        + table-view.columns[10].min-width
    );
    preferred-height: 512px;
    title: "ATS Tracking System";

    // Sidebar and table
    HorizontalLayout {
        width: 100%;

        // Left sidebar that displays all information about the currently selected element
        sidebar := Sidebar {
            selected-job-application <=> selected-job-application;
        }

        // The table
        table-view := StandardTableView {
            current-row-changed(current-row) => {
                // Call the backend code to change the sidebar
                use-job-application(table-rows[current-row][0].text.to-float());
                re-bind-selected();
            }
            width: 80%;
            height: 100%;
            columns: [
                // Column titles have manually added newlines because there is no automatic word-wrap for column titles
                { title: "ID", min-width: 4.5rem },
                { title: "Source", min-width: 7rem },
                { title: "Company", min-width: 8.5rem },
                { title: "Job Title", min-width: 7.5rem },
                { title: "Application\nDate", min-width: 9rem },
                { title: "Time\nTaken", min-width: 6.5rem },
                { title: "Human\nResponse", min-width: 10rem },
                { title: "Response\nDate", min-width: 9rem },
                { title: "Days to\nRespond", min-width: 8rem },
                { title: "Website", min-width: 7.5rem },
                { title: "Notes", min-width: 7rem },
            ];
            rows: table-rows;
        }
    }
}
