use chrono::{NaiveDate, TimeDelta};

/// A row in the job application table
pub struct JobApplication {
    pub id: i32,
    pub source: String,
    pub company: String,
    pub job_title: String,
    pub application_date: NaiveDate,
    pub time_investment: TimeDelta,
    pub automated_response: bool,
    pub human_response: HumanResponse,
    pub human_response_date: NaiveDate,
    pub application_website: String,
    pub notes: String
}

pub enum HumanResponse {
    None,
    Rejection,
    InterviewRequest
}

/// Get all job applications
pub fn get_job_applications() -> Result<Vec<JobApplication>, Box<dyn std::error::Error>> {
    todo!()
}

/// Get all job applications where `human_response == None`
pub fn get_pending_job_applications() -> Result<Vec<JobApplication>, Box<dyn std::error::Error>> {
    todo!()
}

/// Insert a new job application, returning the new application with generated `id` and `application_date`.
/// 
/// `id` and `application_date` are automatically generated by the next available id and the current date, respectively.
pub fn insert_job_application(application: JobApplication) -> Result<JobApplication, Box<dyn std::error::Error>> {
    todo!()
}

/// Update a job application, returning the updated application.
/// 
/// `id` is used to determine what application to overwrite.
/// If there is no application with that id, nothing will be changed in the database and an error will be returned
pub fn update_job_application(application: JobApplication) -> Result<JobApplication, Box<dyn std::error::Error>> {
    todo!()
}
